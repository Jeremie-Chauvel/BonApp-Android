<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="6f36a7b8-985a-4016-85f5-370cbef3ddba" activeEnvironment="Default" name="REST Project BonApp" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="74c93f99-0d84-4915-9a8c-b95d328bab21" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://PC--:8089/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Api_rest" path="/bonApp/api_rest" id="8386b23f-6fcd-4d15-9c42-1366cc7e1fba"><con:settings/><con:parameters><con:parameter required="true"><con:name>/connexion</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Api_rest 1" id="3c370f08-c37f-46c6-b912-160be68c527c" method="PUT"><con:settings/><con:parameters/><con:request name="connexion" id="bbe2c497-528a-40a6-b310-f0498655921b" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>/connexion</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Copy of Api_rest" path="/bonApp/api_rest" id="8386b23f-6fcd-4d15-9c42-1366cc7e1fba"><con:settings/><con:parameters><con:parameter required="true"><con:name>/choix</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Api_rest 1" id="3c370f08-c37f-46c6-b912-160be68c527c" method="PUT"><con:settings/><con:parameters/><con:request name="choix" id="bbe2c497-528a-40a6-b310-f0498655921b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>/choix</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="2e1e3e29-99ee-4216-8f13-fc92b9e9e79e" port="8089" path="/" host="PC--" name="REST MockService BonApp"><con:settings/><con:properties/><con:restMockAction name="/bonApp/api_rest" method="PUT" resourcePath="/bonApp/api_rest/connexion" id="d535229a-3b84-48b6-9cff-89812185f2e3"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="reponse à connexion" id="697da309-c4bc-4a10-b512-dbfcece921e0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ verif:true}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/bonApp/api_rest" method="PUT" resourcePath="/bonApp/api_rest/choix" id="93fc9e2c-5dbc-463b-a924-2b6a32329707"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="reponse à choix" id="8906dd70-4d2e-49b5-86d1-e26b1a41efa8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{c_bon:true}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>